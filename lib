local Library = {}

-- Colors
Library.AccentColor = Color3.fromRGB(0, 150, 255)
Library.BackgroundColor = Color3.fromRGB(30, 30, 40)
Library.TextColor = Color3.fromRGB(220, 220, 220)

-- Create main window
function Library:CreateWindow(name)
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = name
    ScreenGui.Parent = game:GetService("CoreGui")
    ScreenGui.ResetOnSpawn = false

    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 300, 0, 400)
    MainFrame.Position = UDim2.new(0.5, -150, 0.5, -200)
    MainFrame.BackgroundColor3 = Library.BackgroundColor
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = ScreenGui

    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Text = name
    Title.TextColor3 = Library.TextColor
    Title.TextSize = 18
    Title.Font = Enum.Font.GothamBold
    Title.Size = UDim2.new(1, 0, 0, 30)
    Title.BackgroundTransparency = 1
    Title.Parent = MainFrame

    local TabButtons = Instance.new("Frame")
    TabButtons.Name = "TabButtons"
    TabButtons.Size = UDim2.new(1, 0, 0, 30)
    TabButtons.Position = UDim2.new(0, 0, 0, 30)
    TabButtons.BackgroundTransparency = 1
    TabButtons.Parent = MainFrame

    local Container = Instance.new("ScrollingFrame")
    Container.Name = "Container"
    Container.Size = UDim2.new(1, 0, 1, -60)
    Container.Position = UDim2.new(0, 0, 0, 60)
    Container.BackgroundTransparency = 1
    Container.ScrollBarThickness = 4
    Container.CanvasSize = UDim2.new(0, 0, 0, 0)
    Container.AutomaticCanvasSize = Enum.AutomaticSize.Y
    Container.Parent = MainFrame

    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.Parent = Container
    UIListLayout.Padding = UDim.new(0, 5)

    local Tabs = {}
    local CurrentTab = nil

    function self:CreateTab(name)
        local TabButton = Instance.new("TextButton")
        TabButton.Name = name
        TabButton.Text = name
        TabButton.TextColor3 = Library.TextColor
        TabButton.TextSize = 14
        TabButton.Font = Enum.Font.Gotham
        TabButton.Size = UDim2.new(0.5, 0, 1, 0)
        TabButton.BackgroundTransparency = 1
        TabButton.Parent = TabButtons

        local TabFrame = Instance.new("Frame")
        TabFrame.Name = name
        TabFrame.Size = UDim2.new(1, 0, 1, 0)
        TabFrame.BackgroundTransparency = 1
        TabFrame.Visible = false
        TabFrame.Parent = Container

        local TabListLayout = Instance.new("UIListLayout")
        TabListLayout.Parent = TabFrame
        TabListLayout.Padding = UDim.new(0, 5)

        local Tab = {
            Frame = TabFrame,
            Button = TabButton
        }

        TabButton.MouseButton1Click:Connect(function()
            if CurrentTab then
                CurrentTab.Frame.Visible = false
                CurrentTab.Button.TextColor3 = Library.TextColor
            end
            CurrentTab = Tab
            Tab.Frame.Visible = true
            Tab.Button.TextColor3 = Library.AccentColor
        end)

        table.insert(Tabs, Tab)

        if #Tabs == 1 then
            TabButton.TextColor3 = Library.AccentColor
            Tab.Frame.Visible = true
            CurrentTab = Tab
        end

        local TabFunctions = {}

        function TabFunctions:CreateSection(title)
            local Section = {}

            local SectionFrame = Instance.new("Frame")
            SectionFrame.Name = "Section"
            SectionFrame.Size = UDim2.new(1, -20, 0, 0)
            SectionFrame.BackgroundTransparency = 1
            SectionFrame.Parent = Tab.Frame

            local SectionListLayout = Instance.new("UIListLayout")
            SectionListLayout.Parent = SectionFrame
            SectionListLayout.Padding = UDim.new(0, 5)

            local TitleLabel = Instance.new("TextLabel")
            TitleLabel.Name = "Title"
            TitleLabel.Text = title
            TitleLabel.TextColor3 = Library.TextColor
            TitleLabel.TextSize = 16
            TitleLabel.Font = Enum.Font.GothamBold
            TitleLabel.Size = UDim2.new(1, 0, 0, 20)
            TitleLabel.BackgroundTransparency = 1
            TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
            TitleLabel.Parent = SectionFrame

            local Divider = Instance.new("Frame")
            Divider.Name = "Divider"
            Divider.Size = UDim2.new(1, 0, 0, 1)
            Divider.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
            Divider.BorderSizePixel = 0
            Divider.Parent = SectionFrame

            function Section:CreateToggle(name, default, callback)
                local Toggle = {}

                local ToggleFrame = Instance.new("Frame")
                ToggleFrame.Name = "Toggle"
                ToggleFrame.Size = UDim2.new(1, 0, 0, 20)
                ToggleFrame.BackgroundTransparency = 1
                ToggleFrame.Parent = SectionFrame

                local ToggleButton = Instance.new("TextButton")
                ToggleButton.Name = "Button"
                ToggleButton.Text = ""
                ToggleButton.Size = UDim2.new(0, 20, 0, 20)
                ToggleButton.Position = UDim2.new(1, -20, 0, 0)
                ToggleButton.BackgroundColor3 = default and Library.AccentColor or Color3.fromRGB(80, 80, 80)
                ToggleButton.BorderSizePixel = 0
                ToggleButton.Parent = ToggleFrame

                local ToggleLabel = Instance.new("TextLabel")
                ToggleLabel.Name = "Label"
                ToggleLabel.Text = name
                ToggleLabel.TextColor3 = Library.TextColor
                ToggleLabel.TextSize = 14
                ToggleLabel.Font = Enum.Font.Gotham
                ToggleLabel.Size = UDim2.new(1, -25, 1, 0)
                ToggleLabel.BackgroundTransparency = 1
                ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
                ToggleLabel.Parent = ToggleFrame

                local Value = default

                ToggleButton.MouseButton1Click:Connect(function()
                    Value = not Value
                    ToggleButton.BackgroundColor3 = Value and Library.AccentColor or Color3.fromRGB(80, 80, 80)
                    callback(Value)
                end)

                function Toggle:Set(value)
                    Value = value
                    ToggleButton.BackgroundColor3 = Value and Library.AccentColor or Color3.fromRGB(80, 80, 80)
                    callback(Value)
                end

                return Toggle
            end

            function Section:CreateSlider(name, min, max, default, callback)
                local Slider = {}

                local SliderFrame = Instance.new("Frame")
                SliderFrame.Name = "Slider"
                SliderFrame.Size = UDim2.new(1, 0, 0, 40)
                SliderFrame.BackgroundTransparency = 1
                SliderFrame.Parent = SectionFrame

                local SliderLabel = Instance.new("TextLabel")
                SliderLabel.Name = "Label"
                SliderLabel.Text = name
                SliderLabel.TextColor3 = Library.TextColor
                SliderLabel.TextSize = 14
                SliderLabel.Font = Enum.Font.Gotham
                SliderLabel.Size = UDim2.new(1, 0, 0, 20)
                SliderLabel.BackgroundTransparency = 1
                SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
                SliderLabel.Parent = SliderFrame

                local SliderValue = Instance.new("TextLabel")
                SliderValue.Name = "Value"
                SliderValue.Text = tostring(default)
                SliderValue.TextColor3 = Library.TextColor
                SliderValue.TextSize = 14
                SliderValue.Font = Enum.Font.Gotham
                SliderValue.Size = UDim2.new(0, 40, 0, 20)
                SliderValue.Position = UDim2.new(1, -40, 0, 0)
                SliderValue.BackgroundTransparency = 1
                SliderValue.TextXAlignment = Enum.TextXAlignment.Right
                SliderValue.Parent = SliderFrame

                local SliderBar = Instance.new("Frame")
                SliderBar.Name = "Bar"
                SliderBar.Size = UDim2.new(1, 0, 0, 4)
                SliderBar.Position = UDim2.new(0, 0, 0, 25)
                SliderBar.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
                SliderBar.BorderSizePixel = 0
                SliderBar.Parent = SliderFrame

                local SliderFill = Instance.new("Frame")
                SliderFill.Name = "Fill"
                SliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
                SliderFill.BackgroundColor3 = Library.AccentColor
                SliderFill.BorderSizePixel = 0
                SliderFill.Parent = SliderBar

                local SliderButton = Instance.new("TextButton")
                SliderButton.Name = "Button"
                SliderButton.Text = ""
                SliderButton.Size = UDim2.new(0, 10, 0, 10)
                SliderButton.Position = UDim2.new((default - min) / (max - min), -5, 0.5, -5)
                SliderButton.BackgroundColor3 = Library.AccentColor
                SliderButton.BorderSizePixel = 0
                SliderButton.Parent = SliderBar

                local Dragging = false

                SliderButton.MouseButton1Down:Connect(function()
                    Dragging = true
                end)

                game:GetService("UserInputService").InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        Dragging = false
                    end
                end)

                game:GetService("UserInputService").InputChanged:Connect(function(input)
                    if Dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local X = (input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X
                        X = math.clamp(X, 0, 1)
                        local Value = math.floor(min + (max - min) * X)
                        SliderValue.Text = tostring(Value)
                        SliderFill.Size = UDim2.new(X, 0, 1, 0)
                        SliderButton.Position = UDim2.new(X, -5, 0.5, -5)
                        callback(Value)
                    end
                end)

                function Slider:Set(value)
                    value = math.clamp(value, min, max)
                    local X = (value - min) / (max - min)
                    SliderValue.Text = tostring(value)
                    SliderFill.Size = UDim2.new(X, 0, 1, 0)
                    SliderButton.Position = UDim2.new(X, -5, 0.5, -5)
                    callback(value)
                end

                return Slider
            end

            function Section:CreateDropdown(name, options, default, callback)
                local Dropdown = {}

                local DropdownFrame = Instance.new("Frame")
                DropdownFrame.Name = "Dropdown"
                DropdownFrame.Size = UDim2.new(1, 0, 0, 20)
                DropdownFrame.BackgroundTransparency = 1
                DropdownFrame.Parent = SectionFrame

                local DropdownLabel = Instance.new("TextLabel")
                DropdownLabel.Name = "Label"
                DropdownLabel.Text = name
                DropdownLabel.TextColor3 = Library.TextColor
                DropdownLabel.TextSize = 14
                DropdownLabel.Font = Enum.Font.Gotham
                DropdownLabel.Size = UDim2.new(0.5, 0, 1, 0)
                DropdownLabel.BackgroundTransparency = 1
                DropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
                DropdownLabel.Parent = DropdownFrame

                local DropdownButton = Instance.new("TextButton")
                DropdownButton.Name = "Button"
                DropdownButton.Text = options[default] or options[1]
                DropdownButton.TextColor3 = Library.TextColor
                DropdownButton.TextSize = 14
                DropdownButton.Font = Enum.Font.Gotham
                DropdownButton.Size = UDim2.new(0.5, -5, 1, 0)
                DropdownButton.Position = UDim2.new(0.5, 5, 0, 0)
                DropdownButton.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
                DropdownButton.BorderSizePixel = 0
                DropdownButton.Parent = DropdownFrame

                local DropdownList = Instance.new("ScrollingFrame")
                DropdownList.Name = "List"
                DropdownList.Size = UDim2.new(0.5, -5, 0, 100)
                DropdownList.Position = UDim2.new(0.5, 5, 1, 5)
                DropdownList.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
                DropdownList.BorderSizePixel = 0
                DropdownList.Visible = false
                DropdownList.CanvasSize = UDim2.new(0, 0, 0, #options * 20)
                DropdownList.ScrollBarThickness = 4
                DropdownList.Parent = DropdownFrame

                local ListLayout = Instance.new("UIListLayout")
                ListLayout.Parent = DropdownList

                for i, option in pairs(options) do
                    local OptionButton = Instance.new("TextButton")
                    OptionButton.Name = option
                    OptionButton.Text = option
                    OptionButton.TextColor3 = Library.TextColor
                    OptionButton.TextSize = 14
                    OptionButton.Font = Enum.Font.Gotham
                    OptionButton.Size = UDim2.new(1, 0, 0, 20)
                    OptionButton.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
                    OptionButton.BorderSizePixel = 0
                    OptionButton.Parent = DropdownList

                    OptionButton.MouseButton1Click:Connect(function()
                        DropdownButton.Text = option
                        DropdownList.Visible = false
                        callback(option, i)
                    end)
                end

                DropdownButton.MouseButton1Click:Connect(function()
                    DropdownList.Visible = not DropdownList.Visible
                end)

                function Dropdown:Set(value)
                    if table.find(options, value) then
                        DropdownButton.Text = value
                        callback(value, table.find(options, value))
                    end
                end

                return Dropdown
            end

            return Section
        end

        return TabFunctions
    end

    return self
end

return Library
